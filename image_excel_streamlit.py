import requests
from tempfile import NamedTemporaryFile
import streamlit as st
from PIL import Image
import openpyxl
from openpyxl.styles import PatternFill
from openpyxl.utils import get_column_letter
import math
import io
from functools import lru_cache

# ========================
# Â∏∏ÈáèÂÆö‰πâ
# ========================
COLOR_DICT = {
    "#F9F9F2": 1,
    "#000000": 2,
    "#FFA44B": 3,
    "#FDA51B": 4,
    "#FFC8B7": 6,
    "#FD98BB": 7,
    "#F9DED4": 8,
    "#FFD8AD": 9,
    "#FA5C06": 10,
    "#F2A798": 11,
    "#E7C2B3": 12,
    "#F70F25": 13,
    "#CF638E": 14,
    "#F6545C": 15,
    "#FFBA77": 16,
    "#DE70D0": 17,
    "#F16C3D": 18,
    "#EE8A40": 19,
    "#FAB31A": 20,
    "#C8EF0F": 21,
    "#FE5300": 22,
    "#DF8561": 23,
    "#019EEF": 24,
    "#FA7A65": 25,
    "#F4986A": 26,
    "#F69E41": 27,
    "#F8F47A": 28,
    "#FFFF00": 29,
    "#CA6026": 30,
    "#C91C35": 31,
    "#97605A": 32,
    "#D2D1C4": 33,
    "#9A9898": 34,
    "#D090FD": 35,
    "#DEC8EF": 36,
    "#C59EE2": 37,
    "#C073FB": 38,
    "#D004B1": 39,
    "#5F2989": 41,
    "#FAE710": 42,
    "#E240CA": 43,
    "#EC3CC9": 44,
    "#FBC9FE": 45,
    "#F5B2FA": 46,
    "#FEE9DD": 47,
    "#BFF0EC": 48,
    "#6BDBCF": 49,
    "#A9DDEB": 50,
    "#FFFBDB": 51,
    "#82B8FA": 52,
    "#FEC389": 53,
    "#F0A17E": 54,
    "#2E87F4": 55,
    "#BFBFBF": 56,
    "#FE342A": 57,
    "#0234B4": 58,
    "#5A1D1C": 59,
    "#048696": 60,
    "#F4F579": 61,
    "#60E101": 62,
    "#3AE76E": 63,
    "#54ED11": 64,
    "#0560F7": 65,
    "#14C414": 66,
    "#4A4949": 69,
    "#FEB5D4": 70,
    "#00B050": 71,
    "#3862CC": 75,
    "#7D0024": 78,
    "#6B3618": 79,
    "#EE822F": 86,
    "#FFFFFF": 87,
    "#EEF2FB": 88,
    "#DEDEDE": 89,
    "#EED7C5": 92,
    "#D67752": 95,
    "#FAF2B3": 107,
    "#CFB88B": 108,
    "#898356": 110,
    "#744B1F": 111,
    "#C9D6A1": 112,
    "#95AE53": 114,
    "#516B3C": 116,
    "#262626": 123,
    "#F45212": 125,
    "#FC7373": 127,
    "#FF5B5B": 128,
    "#42ADF8": 130,
    "#0202F0": 133,
    "#69399F": 134,
    "#A58265": 135,
    "#B05E42": 136,
    "#E49704": 138,
    "#995BCD": 139,
    "#FB99B7": 140,
    "#9DBE8F": 141,
    "#B7673B": 144,
    "#911426": 145,
    "#57858F": 155,
    "#20912B": 150,
    "#8FD1DF": 151,
    "#874B2B": 147,
    "#595959": 156,
    "#2B4116": 157,
    "#1E366A": 159,
    "#7DE1B1": 161,
    "#3F0F04": 169,
    "#0B501B": 170,
    "#F20000": 233
}


# ========================
# Â∑•ÂÖ∑ÂáΩÊï∞
# ========================
@st.cache_data
def init_preset_colors():
    """È¢ÑÂ§ÑÁêÜÈ¢úËâ≤Êï∞ÊçÆÂπ∂ÁºìÂ≠ò"""
    preset_colors = []
    for hex_color, num in COLOR_DICT.items():
        r = int(hex_color[1:3], 16)
        g = int(hex_color[3:5], 16)
        b = int(hex_color[5:7], 16)
        preset_colors.append(((r, g, b), num, hex_color))
    return preset_colors


@lru_cache(maxsize=1024)
def find_closest_color(pixel_rgb, _preset_colors):
    """Â∏¶ÁºìÂ≠òÁöÑÈ¢úËâ≤ÂåπÈÖçÂáΩÊï∞"""
    min_distance = float('inf')
    closest_num = 87  # ÈªòËÆ§ÁôΩËâ≤
    for preset in _preset_colors:
        r_diff = pixel_rgb[0] - preset[0][0]
        g_diff = pixel_rgb[1] - preset[0][1]
        b_diff = pixel_rgb[2] - preset[0][2]
        distance = r_diff ** 2 + g_diff ** 2 + b_diff ** 2
        if distance < min_distance:
            min_distance = distance
            closest_num = preset[1]
    return closest_num


# ========================
# Ê†∏ÂøÉÂ§ÑÁêÜÂáΩÊï∞
# ========================
def process_image(image, option, max_blocks=None, custom_size=None):
    """Â§ÑÁêÜÂõæÁâáÊ†∏ÂøÉÈÄªËæë"""
    try:
        img = image.convert("RGBA")
        original_width, original_height = img.size

        # ËÆ°ÁÆóÁõÆÊ†áÂ∞∫ÂØ∏
        if option == "max_blocks":
            aspect_ratio = original_width / original_height
            new_width = int(math.sqrt(max_blocks * aspect_ratio))
            new_height = int(max_blocks / new_width)
        elif option == "custom_size":
            new_width, new_height = custom_size
        else:
            new_width, new_height = original_width, original_height

        img = img.resize((new_width, new_height))
        pixels = img.load()

        # ÂàõÂª∫ExcelÂ∑•‰ΩúÁ∞ø
        wb = openpyxl.Workbook()
        ws = wb.active

        # ËÆæÁΩÆÂçïÂÖÉÊ†ºÊ†∑Âºè
        for col in range(1, new_width + 1):
            ws.column_dimensions[get_column_letter(col)].width = 2.86
        for row in range(1, new_height + 1):
            ws.row_dimensions[row].height = 15

        # Â§ÑÁêÜÂÉèÁ¥†
        color_stats = {}
        preset_colors = init_preset_colors()

        for y in range(new_height):
            for x in range(new_width):
                r, g, b, a = pixels[x, y]

                # Â§ÑÁêÜÈÄèÊòéÂÉèÁ¥†
                if a < 255:
                    color_num = 87
                else:
                    color_num = find_closest_color((r, g, b), tuple(preset_colors))

                # Êõ¥Êñ∞ÁªüËÆ°
                color_stats[color_num] = color_stats.get(color_num, 0) + 1

                # ÂÜôÂÖ•ÂçïÂÖÉÊ†º
                cell = ws.cell(row=y + 1, column=x + 1)
                cell.value = color_num
                if color_num != 87:
                    hex_color = next((c[2] for c in preset_colors if c[1] == color_num), "#FFFFFF")
                    cell.fill = PatternFill(
                        start_color=hex_color[1:],
                        end_color=hex_color[1:],
                        fill_type="solid"
                    )

        # Ê∑ªÂä†ÁªüËÆ°‰ø°ÊÅØ
        add_statistics(ws, new_width, color_stats, preset_colors)

        return wb, (new_width, new_height), color_stats

    except Exception as e:
        st.error(f"ÂõæÁâáÂ§ÑÁêÜÈîôËØØ: {str(e)}")
        return None, None, None


def add_statistics(ws, width, color_stats, preset_colors):
    """Ê∑ªÂä†ÁªüËÆ°‰ø°ÊÅØÂíå‰∫åÁª¥Á†ÅÂà∞Excel"""
    start_col = width + 5

    # ÁªüËÆ°Ë°®Â§¥
    ws.cell(row=1, column=start_col, value="ÁßØÊú®ÁºñÂè∑")
    ws.cell(row=1, column=start_col + 1, value="Êï∞Èáè")

    # Ê∑ªÂä†ÁªüËÆ°Êï∞ÊçÆ
    for row, (color_num, count) in enumerate(sorted(color_stats.items()), start=2):
        hex_color = next((c[2] for c in preset_colors if c[1] == color_num), "#FFFFFF")

        # ÁºñÂè∑ÂçïÂÖÉÊ†º
        num_cell = ws.cell(row=row, column=start_col)
        num_cell.value = color_num
        if color_num != 87:
            num_cell.fill = PatternFill(
                start_color=hex_color[1:],
                end_color=hex_color[1:],
                fill_type="solid"
            )

        # Êï∞ÈáèÂçïÂÖÉÊ†º
        ws.cell(row=row, column=start_col + 1, value=count)

        # ‰øÆÊîπÂêéÁöÑ‰∫åÁª¥Á†ÅÊèíÂÖ•‰ª£Á†Å
try:
    from openpyxl.drawing.image import Image as xlImage

    # ÊûÑÂª∫GitHubÂõæÁâáURLÔºàÂÅáËÆæÂõæÁâáÂú®mainÂàÜÊîØÁöÑÊ†πÁõÆÂΩïÔºâ
    github_url = "https://github.com/tudoudaren/jiafei/blob/main/taobao_qr.jpg"
    
    # ‰∏ãËΩΩÂõæÁâáÂà∞‰∏¥Êó∂Êñá‰ª∂
    with NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
        response = requests.get(github_url, timeout=10)
        response.raise_for_status()  # Ê£ÄÊü•HTTPÈîôËØØ
        tmp_file.write(response.content)
        tmp_path = tmp_file.name

    # Âä†ËΩΩÂõæÁâáÂπ∂Ë∞ÉÊï¥Â∞∫ÂØ∏
    qr_img = xlImage(tmp_path)
    qr_img.width = 150
    qr_img.height = 150

    # ÂÆö‰ΩçÂà∞ÁªüËÆ°Ë°®Âè≥‰æß
    anchor_col = get_column_letter(start_col + 3)
    
    # Ê∑ªÂä†ÊñáÂ≠óÂà∞Á¨¨‰∏ÄË°å
    ws[f"{anchor_col}1"] = "Ê∑òÂÆùÂ∫óÈì∫Êâ´Á†Å"
    ws[f"{anchor_col}1"].font = Font(bold=True, color="FF4500")
    
    # ÊèíÂÖ•ÂõæÁâáÂà∞Á¨¨‰∫åË°å
    ws.add_image(qr_img, f"{anchor_col}2")
    
    # ËÆæÁΩÆË°åÈ´òÁ°Æ‰øùÊòæÁ§∫
    ws.row_dimensions[2].height = 120  # Ë∞ÉÊï¥Á¨¨‰∫åË°åÈ´òÂ∫¶

except requests.exceptions.RequestException as e:
    st.error(f"‰∫åÁª¥Á†Å‰∏ãËΩΩÂ§±Ë¥•: {str(e)}")
    print(f"ÁΩëÁªúËØ∑Ê±ÇÂºÇÂ∏∏: {str(e)}")
except Exception as e:
    st.error(f"‰∫åÁª¥Á†ÅÊèíÂÖ•Â§±Ë¥•: {str(e)}")
    print(f"‰∫åÁª¥Á†ÅÂ§ÑÁêÜÂºÇÂ∏∏: {str(e)}")
finally:
    # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
    if 'tmp_path' in locals() and os.path.exists(tmp_path):
        os.remove(tmp_path)
# ========================
# StreamlitÁïåÈù¢
# ========================
def main():
    st.set_page_config(
        page_title="Âä†È£ûÁßØÊú®-ÂõæÁâáËΩ¨ExcelÂÉèÁ¥†Áîª",
        page_icon="üß±",
        layout="centered"
    )

    # Ê†áÈ¢ò‰∏é‰∫åÁª¥Á†ÅÂàÜÊ†èÂ∏ÉÂ±Ä
    col1, col2 = st.columns([2, 1])
    with col1:
        st.title("üß±ÂõæÁâáËΩ¨excelÂÉèÁ¥†Áîª-‚ÄúÂä†È£ûÁßØÊú®‚ÄùÂà∂‰Ωú")
        st.markdown("Ê∑òÂÆùÂ∞èÁ∫¢‰π¶ÂÖ≥Ê≥®‚ÄúÂä†È£ûÁßØÊú®‚ÄùÔºåBÁ´ôÂÖ≥Ê≥®‚ÄúÊüêÂ±±Ê•Ç‚Äù")
    with col2:
        qr_image = Image.open("taobao_qr.jpg")  # Á°Æ‰øùÂõæÁâáÊñá‰ª∂Âú®È°πÁõÆÁõÆÂΩï‰∏ã
        st.image(qr_image,
                caption="Êâ´Á†ÅÊ∑òÂÆùÂ∫óÈì∫ÔºåÊàñÂ∞èÁ∫¢‰π¶ÂÖ≥Ê≥®‚ÄúÂä†È£ûÁßØÊú®‚ÄùÔºåÂèØÂÆöÂà∂ÊàñÊâπÈáèÈááË¥≠",
                width=200,
                use_container_width=False)  # Â∑≤Êõ¥Êñ∞ÂèÇÊï∞

    st.markdown("---")

    # Êñá‰ª∂‰∏ä‰º†
    uploaded_file = st.file_uploader("1„ÄÅÁÇπÂáªBrowse files‰∏ä‰º†ÂõæÁâá", type=["jpg", "jpeg", "png"])
    if not uploaded_file:
        return

    # Â§ÑÁêÜÈÄâÈ°π
    option = st.radio("2„ÄÅÈÄâÊã©ÂÉèÁ¥†ÁîªÂ∞∫ÂØ∏", [
        "ÊúÄÂ§ßÁßØÊú®Êï∞Èáè",
        "Ëá™ÂÆö‰πâÂ∞∫ÂØ∏",
        "ÂéüÂßãÂ∞∫ÂØ∏"
    ], index=0)

    # ÂèÇÊï∞ËæìÂÖ•
    max_blocks = None
    custom_size = None

    if option == "ÊúÄÂ§ßÁßØÊú®Êï∞Èáè":
        max_blocks = st.number_input("ËæìÂÖ•‰ΩøÁî®ÁöÑÊúÄÂ§ßÁßØÊú®Êï∞Èáè", min_value=1, value=1000, step=100)
    elif option == "Ëá™ÂÆö‰πâÂ∞∫ÂØ∏":
        col1, col2 = st.columns(2)
        with col1:
            width = st.number_input("ÂÆΩÂ∫¶ÔºàÁßØÊú®Êï∞Ôºâ", min_value=1, value=100)
        with col2:
            height = st.number_input("È´òÂ∫¶ÔºàÁßØÊú®Êï∞Ôºâ", min_value=1, value=100)
        custom_size = (width, height)

    # Â§ÑÁêÜÊåâÈíÆ
    if st.button("‰∏ÄÈîÆÁîüÊàêÂÉèÁ¥†Áîª", use_container_width=True):
        with st.spinner("Ê≠£Âú®ÁîüÊàêExcelÊñá‰ª∂..."):
            try:
                image = Image.open(uploaded_file)
                wb, size, stats = process_image(
                    image,
                    option="max_blocks" if option == "ÊúÄÂ§ßÁßØÊú®Êï∞Èáè" else \
                        "custom_size" if option == "Ëá™ÂÆö‰πâÂ∞∫ÂØ∏" else "original",
                    max_blocks=max_blocks,
                    custom_size=custom_size
                )

                if wb:
                    st.success(f"ËΩ¨Êç¢ÊàêÂäüÔºÅÊúÄÁªàÂ∞∫ÂØ∏Ôºö{size[0]}x{size[1]} ÂÉèÁ¥†")

                    # ÁîüÊàê‰∏ãËΩΩÊñá‰ª∂
                    excel_buffer = io.BytesIO()
                    wb.save(excel_buffer)
                    excel_buffer.seek(0)

                    # ÁîüÊàêÂ∏¶Êó∂Èó¥Êà≥ÁöÑÊñá‰ª∂ÂêçÔºàÊñ∞Â¢ûÈÉ®ÂàÜÔºâ
                    from datetime import datetime
                    timestamp = datetime.now().strftime("%Y%m%d%H%M")
                    filename = f"Âä†È£ûÁßØÊú®_ÂÉèÁ¥†Áîª_{timestamp}.xlsx"

                    st.download_button(
                        label="‰∏ãËΩΩExcelÊñá‰ª∂",
                        data=excel_buffer,
                        file_name=filename,  # ‰øÆÊîπÊñá‰ª∂Âêç
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )

            except Exception as e:
                st.error(f"Â§ÑÁêÜÂ§±Ë¥•: {str(e)}")


if __name__ == "__main__":
    main()
